#include <stdio.h>
#include <stdlib.h>

#define MAX 1000

typedef struct {
    int items[MAX];
    int front, rear;
} Queue;

void initQueue(Queue *q) {
    q->front = -1;
    q->rear = -1;
}

int isFull(Queue *q) {
    return (q->rear == MAX - 1);
}

int isEmpty(Queue *q) {
    return (q->front == -1 || q->front > q->rear);
}


void Insert(Queue *q, int value) {
    if (isFull(q)) {
        printf("Queue is full. Cannot Insert %d.\n", value);
        return;
    }
    if (isEmpty(q)) {
        q->front = 0;
    }
    q->rear++;
    q->items[q->rear] = value;
    printf("Inserted %d.\n", value);
}

int Delete(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty. Cannot Delete.\n");
        return -1; 
    }
    int value = q->items[q->front];
    q->front++;
    if (q->front > q->rear) {
        initQueue(q); 
    }
    return value;
}

void displayQueue(Queue *q) {
    if (isEmpty(q)) {
        printf("Queue is empty.\n");
        return;
    }
    printf("Queue elements are: ");
    for (int i = q->front; i <= q->rear; i++) {
        printf("%d ", q->items[i]);
    }
    printf("\n");
}

int main() {
    Queue q;
    initQueue(&q);

    int choice, value;

    while (1) {
        printf("\nQueue Operations:\n");
        printf("1. Insert\n");
        printf("2. Delete\n");
        printf("3. Display Queue\n");
        printf("4. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value to Insert: ");
                scanf("%d", &value);
                Insert(&q, value);
                break;

            case 2:
                value = Delete(&q);
                if (value != -1) {
                    printf("Deleted %d.\n", value);
                }
                break;

            case 3:
                displayQueue(&q);
                break;

            case 4:
                printf("Exiting...\n");
                exit(0);

            default:
                printf("Invalid choice. Please try again.\n");
                break;
        }
    }

    return 0;
}
